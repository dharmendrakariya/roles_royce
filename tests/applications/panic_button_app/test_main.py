import argparse
import mock
import pytest
from hexbytes import HexBytes

from web3 import Web3

from roles_royce.applications.panic_button_app.panic_button_main import start_the_engine, gear_up, drive_away, main
from roles_royce.applications.panic_button_app.utils import ENV, ExecConfig
from roles_royce.toolshed.disassembling.disassembling_aura import AuraDisassembler
from roles_royce.constants import Chain

from tests.utils import (local_node_eth, accounts, ETH_LOCAL_NODE_URL, fork_unlock_account,
                         create_simple_safe,
                         get_balance, steal_token, SimpleSafe, top_up_address, SCRAPE_ACCOUNT)
from tests.roles import setup_common_roles, deploy_roles, apply_presets
from tests.utils import create_simple_safe, SCRAPE_ACCOUNT

JSON_FORM = {"simulate": True,
          "position_id": "Balancer_106",
          "protocol": "Balancer",
          "common_exec_config": [{"name":"percentage","value": 100}],
          "position_exec_config": [
            {
              "function_name": "exit_1_1",
               "parameters": [
                {
                "bpt_address": "0x8353157092ED8Be69a9DF8F95af097bbF33Cb2aF",#"0xF4C0DD9B82DA36C07605df83c8a416F11724d88b",
                "max_slippage": 0.01}
            ]
            }
            ]
        }

def test_start_the_engine(monkeypatch):
    # have an anvil instance running before testing
    monkeypatch.setenv('MAINNET_RPC_ENDPOINT', 'https://eth.llamarpc.com')
    monkeypatch.setenv('MAINNET_FALLBACK_RPC_ENDPOINT', 'https://eth.llamarpc.com')
    monkeypatch.setenv('GNOSISDAO_MAINNET_AVATAR_SAFE_ADDRESS', "0x849D52316331967b6fF1198e5E32A0eB168D039d")
    monkeypatch.setenv('GNOSISDAO_MAINNET_ROLES_MOD_ADDRESS', "0x1cFB0CD7B1111bf2054615C7C491a15C4A3303cc")
    monkeypatch.setenv('GNOSISDAO_MAINNET_ROLE', "4")
    monkeypatch.setenv('GNOSISDAO_MAINNET_PRIVATE_KEYS', "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80")
    env = ENV("GnosisDAO", "mainnet")
    w3 = start_the_engine(env)
    assert w3.is_connected()

def test_gear_up(monkeypatch):
    monkeypatch.setenv('MAINNET_RPC_ENDPOINT', 'https://eth.llamarpc.com')
    monkeypatch.setenv('MAINNET_FALLBACK_RPC_ENDPOINT', 'https://eth.llamarpc.com')
    monkeypatch.setenv('GNOSISDAO_MAINNET_AVATAR_SAFE_ADDRESS', "0x849D52316331967b6fF1198e5E32A0eB168D039d")
    monkeypatch.setenv('GNOSISDAO_MAINNET_ROLES_MOD_ADDRESS', "0x1cFB0CD7B1111bf2054615C7C491a15C4A3303cc")
    monkeypatch.setenv('GNOSISDAO_MAINNET_ROLE', "4")
    monkeypatch.setenv('GNOSISDAO_MAINNET_PRIVATE_KEYS', "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80")
    
    DAO = 'GnosisDAO'
    BLOCKCHAIN = 'mainnet'
    ENVY = ENV(DAO, BLOCKCHAIN)

    PROTOCOL = JSON_FORM["protocol"]
    SIMULATE = False
    W3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8546'))
    PERCENTAGE = JSON_FORM["common_exec_config"][0]["value"]
    EXIT_STRATEGY = JSON_FORM["position_exec_config"][0]["function_name"]
    EXIT_ARGUMENTS = [JSON_FORM["position_exec_config"][0]["parameters"][0]]
    EXEC_CONFIG = ExecConfig(PERCENTAGE, SIMULATE, DAO, BLOCKCHAIN, PROTOCOL, EXIT_STRATEGY, EXIT_ARGUMENTS)

    disassembler, txn_transactable = gear_up(W3, ENVY, EXEC_CONFIG)
    assert disassembler.avatar_safe_address == '0x849D52316331967b6fF1198e5E32A0eB168D039d'    
    assert txn_transactable[0].data == """0x8bdb3913f4c0dd9b82da36c07605df83c8a416f11724d88b000200000000000000000026000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"""   

#@pytest.mark.skip("transaction is now reverted, check why")
def test_drive_away(local_node_eth, accounts, monkeypatch):
    PRESET = '{"version":"1.0","chainId":"1","meta":{"name":null,"description":"","txBuilderVersion":"1.8.0"},' \
         '"createdAt":1695826823729,"transactions":[{"to":"0x1ffAdc16726dd4F91fF275b4bF50651801B06a86",' \
         '"data":"0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8","value":"0"},{"to":"0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data":"0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c88bdbc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c01318bab7ee1f5ba734172bf7718b5dc6ec90e10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value":"0"}]}'

    w3 = local_node_eth.w3
    block = 18421437
    local_node_eth.set_block(block)

    avatar_safe = create_simple_safe(w3=w3, owner=accounts[0])
    roles_contract = deploy_roles(avatar=avatar_safe.address, w3=w3)
    setup_common_roles(avatar_safe, roles_contract)

    apply_presets(avatar_safe, roles_contract, json_data=PRESET,
                  replaces=[("c01318bab7ee1f5ba734172bf7718b5dc6ec90e1", avatar_safe.address[2:])])


    PRIVATE_KEY = accounts[1].key
    monkeypatch.setenv('MAINNET_RPC_ENDPOINT', 'https://eth.llamarpc.com')
    monkeypatch.setenv('MAINNET_FALLBACK_RPC_ENDPOINT', 'https://eth.llamarpc.com')
    monkeypatch.setenv('GNOSISDAO_MAINNET_AVATAR_SAFE_ADDRESS', avatar_safe.address)
    monkeypatch.setenv('GNOSISDAO_MAINNET_ROLES_MOD_ADDRESS', roles_contract.address)
    monkeypatch.setenv('GNOSISDAO_MAINNET_ROLE', "1")
    monkeypatch.setenv('GNOSISDAO_MAINNET_PRIVATE_KEYS', "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d")

    DAO = 'GnosisDAO'
    BLOCKCHAIN = 'mainnet'
    ENVY = ENV(DAO, BLOCKCHAIN)

    PROTOCOL = JSON_FORM["protocol"]
    SIMULATE = False
    W3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8546'))
    PERCENTAGE = JSON_FORM["common_exec_config"][0]["value"]
    EXIT_STRATEGY = JSON_FORM["position_exec_config"][0]["function_name"]
    EXIT_ARGUMENTS = [JSON_FORM["position_exec_config"][0]["parameters"][0]]
    EXEC_CONFIG = ExecConfig(PERCENTAGE, SIMULATE, DAO, BLOCKCHAIN, PROTOCOL, EXIT_STRATEGY, EXIT_ARGUMENTS)

    DISASSEMBLER, TXN_TRANSACTABLE = gear_up(W3, ENVY, EXEC_CONFIG)
    response = drive_away(DISASSEMBLER, TXN_TRANSACTABLE, PRIVATE_KEY, SIMULATE)

    assert response['status'] == 200
    assert response['message'] == "Transaction executed successfully"

